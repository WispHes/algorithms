Для решения данной задачи вам понадобится пакет strconv, возможно использовать пакеты strings или encoding/csv, 
или даже bufio - вы не ограничены в выборе способа решения задачи. 
В решениях мы поделимся своими способами решения этой задачи, предлагаем вам сделать то же самое.

В привычных нам редакторах электронных таблиц присутствует удобное представление числа с разделителем разрядов в виде пробела, 
кроме того в России целая часть от дробной отделяется запятой. 
Набор таких чисел был экспортирован в формат CSV, где в качестве разделителя используется символ ";".

На стандартный ввод вы получаете 2 таких вещественных числа, 
в качестве результата требуется вывести частное от деления первого числа на второе с точностью до четырех знаков после "запятой" 
(на самом деле после точки, результат не требуется приводить к исходному формату).

P.S. небольшое отступление, связанное с чтением из стандартного ввода. 
Кто-то захочет использовать для этого пакет bufio.Reader. 
Это вполне допустимый вариант, но если вы резонно обрабатываете ошибку метода ReadString('\n'), 
то получаете ошибку EOF, а точнее (io.EOF - End Of File). 
На самом деле это не ошибка, а состояние, означающее, 
что файл (а os.Stdin является файлом) прочитан до конца. 
Чтобы ошибка была обработана правильно, вы можете поступить так:

if err != nil && err != io.EOF {
	...
}


package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

func main() {
	str, _ := bufio.NewReader(os.Stdin).ReadString('\n')
	str = strings.Trim(str, "\n")

	nums := strings.Split(str, ";")
	for i := range nums {
		nums[i] = strings.Replace(nums[i], ",", ".", -1)
		nums[i] = strings.Replace(nums[i], " ", "", -1)
	}

	n1, _ := strconv.ParseFloat(nums[0], 64)
	n2, _ := strconv.ParseFloat(nums[1], 64)

	fmt.Printf("%.4f", n1/n2)
}
