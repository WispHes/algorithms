Алла ошиблась при копировании из одной структуры данных в другую. 
Она хранила массив чисел в кольцевом буфере. 
Массив был отсортирован по возрастанию, и в нём можно было найти элемент за логарифмическое время. 
Алла скопировала данные из кольцевого буфера в обычный массив, но сдвинула данные исходной отсортированной последовательности. 
Теперь массив не является отсортированным. Тем не менее, нужно обеспечить возможность находить в нем элемент за O(logn).
Можно предполагать, что в массиве только уникальные элементы.
Задачу необходимо сдавать с компилятором Make, он выбран по умолчанию, других компиляторов в задаче нет. 
Решение отправляется файлом. Требуемые сигнатуры функций лежат в заготовках кода на диске.

От вас требуется реализовать функцию, осуществляющую поиск в сломанном массиве. 
Файлы с заготовками кода, содержащими сигнатуры функций и базовый тест для поддерживаемых языков, находятся на Яндекс.
Диске по ссылке. Обратите внимание, что считывать данные и выводить ответ не требуется.


def broken_search(nums, target):
    if len(nums) == 1 and nums[0] != target:
        return -1

    left, right = 0, len(nums) - 1

    while left <= right:
        if nums[left] == target:
            return left

        if nums[right] == target:
            return right

        mid_index = (left + right) // 2
        mid_number = nums[mid_index]

        if mid_number == target:
            return mid_index

        if nums[left] <= mid_number:
            if nums[left] < target < mid_number:
                right = mid_index - 1
            else:
                left = mid_index + 1

        else:
            if mid_number < target < nums[right]:
                left = mid_index + 1
            else:
                right = mid_index - 1
    return -1


def test():
    arr = [19, 21, 100, 101, 1, 4, 5, 7, 12]
    assert broken_search(arr, 5) == 6
